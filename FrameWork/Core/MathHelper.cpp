#include "MathHelper.h"

#include <math.h>
#include "Vector3.h"

//////////////////////////////////////////////////////////////////////////

const float MathHelper::E = 2.718282f;
const float MathHelper::Log2E = 1.442695f;
const float MathHelper::Log10E = 0.4342945f;
const float MathHelper::Pi = 3.141593f;
const float MathHelper::TwoPi = 6.283185f;
const float MathHelper::PiOver2 = 1.570796f;
const float MathHelper::PiOver4 = 0.7853982f;
const float MathHelper::Epsilon = 1E-6f;

#pragma warning( disable : 4146)
const int MathHelper::IntMinValue = -2147483648;
const int MathHelper::IntMaxValue = 2147483647;
const float MathHelper::FloatMinValue = -3.402823E+38f;
const float MathHelper::FloatMaxValue = 3.402823E+38f;
#pragma warning( default : 4146)

//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 생성자
//////////////////////////////////////////////////////////////////////////
MathHelper::MathHelper( void )
{
	
}
//////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////
///@brief 반올림
///@param value : 값
///@return : 결과 값
//////////////////////////////////////////////////////////////////////////
double MathHelper::Round( double value )
{
	return Round(value, 0);
}
//////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////
///@brief 반올림
///@param value : 값
///@param position : 올림 자릿수
///@return : 결과
//////////////////////////////////////////////////////////////////////////
double MathHelper::Round( double value, int position )
{
	double temp;
	temp = value * pow(10.0, position); //원하는 소수점 자리만큼의 10의 누승
	temp = floor(temp + 0.5); //0.5를 더해서 가장 가까운 낮은값을 찾음( ex=floor(0.2+0.5)->1.0, floor(0.7+0.5)->1.0f)
	temp *= pow(10.0, -position); //역승해 원값으로 돌림

	return temp;
}
//////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////
///@brief 절대값
///@param value : 값
///@return 결과
//////////////////////////////////////////////////////////////////////////
int MathHelper::Abs( int value )
{
	if(value >= 0)
		return value;
	else
		return -value;
}
//////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////
///@brief 절대값
///@param value : 값
///@return 결과
//////////////////////////////////////////////////////////////////////////
float MathHelper::Abs( float value )
{
	if(value >= 0)
		return value;
	else
		return -value;
}
//////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////
///@brief 절대값
///@param value : 값
///@return 결과
//////////////////////////////////////////////////////////////////////////
double MathHelper::Abs( double value )
{
	if(value >= 0)
		return value;
	else
		return -value;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 각 -> 라디안
///@param degree : 각도
///@return 결과
//////////////////////////////////////////////////////////////////////////
float MathHelper::ToRadians( float degrees )
{
	return degrees * 0.01745329f;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 라디안 -> 각
///@param radians : 라디안
///@return 결과
//////////////////////////////////////////////////////////////////////////
float MathHelper::ToDegrees( float radians )
{
	return radians * 57.29578f;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 두 실수의 거리
///@param value1 : 값1
///@param value2 : 값2
///@return 결과
//////////////////////////////////////////////////////////////////////////
float MathHelper::Distance( float value1, float value2 )
{
	return Abs(value1 - value2);
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 두 실수 중 작은 값
///@param value1 : 값1
///@param value2 : 값2
///@return 결과
//////////////////////////////////////////////////////////////////////////
float MathHelper::Min( float value1, float value2 )
{
	return value1 > value2 ? value2 : value1;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 두 실수 중 큰 값
///@param value1 : 값1
///@param value2 : 값2
///@return 결과
//////////////////////////////////////////////////////////////////////////
float MathHelper::Max( float value1, float value2 )
{
	return value1 > value2 ? value1 : value2;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 값 비교
///@param value : 값
///@param min : 최소값
///@param max : 최대값
///@return 값이 최대값보다 크면 최대값, 최소값보다 작으면 최소값, 아니면 원래 값
//////////////////////////////////////////////////////////////////////////
float MathHelper::Clamp( float value, float min, float max )
{
	value = (double) value > (double) max ? max : value;
	value = (double) value < (double) min ? min : value;

	return value;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 선형보간
///@param value1 : 값1
///@param value12: 값2
///@param amount : 보간값
///@return 결과
//////////////////////////////////////////////////////////////////////////
float MathHelper::Lerp( float value1, float value2, float amount )
{
	return value1 + (value2 - value1) * amount;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 부드럽게(점진적으로?) 보간
///@param value1 : 값1
///@param value12: 값2
///@param amount : 보간값
///@return 결과
//////////////////////////////////////////////////////////////////////////
float MathHelper::SmoothStep( float value1, float value2, float amount )
{
	float num = Clamp(amount, 0.0f, 1.0f);
    
	return Lerp(value1, value2, (float)((double)num * (double)num * (3.0 - 2.0 * (double)num)));
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 카트뮬-롬 보간
///@param value1 : 값1
///@param value2 : 값2
///@param value3 : 값3
///@param value4 : 값4
///@param amount : 보간값
///@return 결과
//////////////////////////////////////////////////////////////////////////
float MathHelper::CatmullRom( float value1, float value2, float value3, float value4, float amount )
{
	float num1 = amount * amount;
	float num2 = amount * num1;

	return (float)(0.5 * (2.0 * (double)value2 + (-(double)value1 + (double)value3)* (double)amount + (2.0 * (double)value1 - 5.0 * (double)value2 + 4.0 * (double)value3 - (double)value4)* (double)num1 + (-(double)value1 + 3.0 * (double)value2 - 3.0 * (double)value3 + (double)value4)* (double)num2));
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 에르미트 보간
///@param value1 : 값1
///@param tangent1 : 탄젠트1
///@param value2 : 값2
///@param tangent2 : 탄젠트2
///@param amount : 보간값
///@return 결과
//////////////////////////////////////////////////////////////////////////
float MathHelper::Hermite( float value1, float tangent1, float value2, float tangent2, float amount )
{
	float num1 = amount;
	float num2 = num1 * num1;
	float num3 = num1 * num2;
	float num4 = (float)(2.0 * (double)num3 - 3.0 * (double)num2 + 1.0);
	float num5 = (float)(-2.0 * (double)num3 + 3.0 * (double)num2);
	float num6 = num3 - 2.0f * num2 + num1;
	float num7 = num3 - num2;

	return (float)((double)value1 * (double)num4 + (double)value2 * (double)num5 + (double)tangent1 * (double)num6 + (double)tangent2 * (double)num7);
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief 각이 360도를 넘어섰을때 각을 뒤집어줌(? 표현 진짜 거시기허네)
///@param angle : 각
///@return 결과
//////////////////////////////////////////////////////////////////////////
float MathHelper::WrapAngle( float angle )
{
	angle = (float)fmod((double) angle, 6.28318548202515);
	
	if ((double)angle <= -3.14159274101257)
		angle += 6.283185f;
	else if ((double)angle > 3.14159274101257)
		angle -= 6.283185f;
	
	return angle;
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
///@brief y=0인 수직평면으로부터 value.Y에 대한 각도를 계산한다(아따, 요것도 표현이 쪼까 거시기허요잉)
///@param value : y축 값을 구할 벡터
//////////////////////////////////////////////////////////////////////////
float MathHelper::AngleOfInclineY( Vector3 value )
{
	if(value == Vector3::Up)
		return 90.0f;

	return ToDegrees((float)acos(Vector3::Dot(value, Vector3(value.X, 0, value.Z))));
}